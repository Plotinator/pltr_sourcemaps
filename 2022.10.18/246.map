{"version":3,"file":"246.bundle.js","mappings":"+LAKA,MAAMA,GAAY,IAAAC,WAAU,EAAAC,UAEbC,eAAeC,EAAYC,EAAQC,EAAOC,GACxD,IAAK,MAAMC,KCRG,SAAkBC,EAAUC,GAC1C,GAAyC,mBAA9BD,EAASE,OAAOC,UAC1B,MAAM,IAAIC,UAAU,gDAGrB,KAAMC,OAAOC,cAAcL,IAAcA,EAAY,GACpD,MAAM,IAAIG,UACT,kEAAkEH,OAIpE,MAAO,CACN,EAAGC,OAAOC,YACT,GAAII,MAAMC,QAAQR,GAAW,CAC5B,IAAK,IAAIS,EAAQ,EAAGA,EAAQT,EAASU,OAAQD,GAASR,QAC/CD,EAASW,MAAMF,EAAOA,EAAQR,GAGrC,MACD,CAEA,IAAIF,EAAQ,GAEZ,IAAK,MAAMa,KAASZ,EACnBD,EAAMc,KAAKD,GAEPb,EAAMW,SAAWT,UACdF,EACNA,EAAQ,IAINA,EAAMW,OAAS,UACZX,EAER,EAEF,CD7BqBe,CAASjB,EAAOC,SAE7BP,GAAU,IAAAwB,eAAcnB,GAASG,EAEzC,C,+DETA,MAAMH,EAAS,IAAIoB,IAAI,cAERtB,eAAeuB,EAAQpB,SAC/B,OAAYD,EAAQC,EAAO,IAClC,C","sources":["webpack:///../node_modules/trash/lib/chunked-exec.js","webpack:///../node_modules/@sindresorhus/chunkify/index.js","webpack:///../node_modules/trash/lib/windows.js"],"sourcesContent":["import {promisify} from 'node:util';\nimport {execFile} from 'node:child_process';\nimport {fileURLToPath} from 'node:url';\nimport chunkify from '@sindresorhus/chunkify';\n\nconst pExecFile = promisify(execFile);\n\nexport default async function chunkedExec(binary, paths, maxPaths) {\n\tfor (const chunk of chunkify(paths, maxPaths)) {\n\t\t// eslint-disable-next-line no-await-in-loop\n\t\tawait pExecFile(fileURLToPath(binary), chunk);\n\t}\n}\n","export default function chunkify(iterable, chunkSize) {\n\tif (typeof iterable[Symbol.iterator] !== 'function') {\n\t\tthrow new TypeError('Expected an `Iterable` in the first argument');\n\t}\n\n\tif (!(Number.isSafeInteger(chunkSize) && chunkSize > 0)) {\n\t\tthrow new TypeError(\n\t\t\t`Expected \\`chunkSize\\` to be a an integer from 1 and up, got \\`${chunkSize}\\``\n\t\t);\n\t}\n\n\treturn {\n\t\t* [Symbol.iterator]() {\n\t\t\tif (Array.isArray(iterable)) {\n\t\t\t\tfor (let index = 0; index < iterable.length; index += chunkSize) {\n\t\t\t\t\tyield iterable.slice(index, index + chunkSize);\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet chunk = [];\n\n\t\t\tfor (const value of iterable) {\n\t\t\t\tchunk.push(value);\n\n\t\t\t\tif (chunk.length === chunkSize) {\n\t\t\t\t\tyield chunk;\n\t\t\t\t\tchunk = [];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (chunk.length > 0) {\n\t\t\t\tyield chunk;\n\t\t\t}\n\t\t}\n\t};\n}\n","import chunkedExec from './chunked-exec.js';\n\n// Binary source: https://github.com/sindresorhus/recycle-bin\nconst binary = new URL('windows-trash.exe', import.meta.url);\n\nexport default async function windows(paths) {\n\tawait chunkedExec(binary, paths, 200);\n}\n"],"names":["pExecFile","promisify","execFile","async","chunkedExec","binary","paths","maxPaths","chunk","iterable","chunkSize","Symbol","iterator","TypeError","Number","isSafeInteger","Array","isArray","index","length","slice","value","push","chunkify","fileURLToPath","URL","windows"],"sourceRoot":""}